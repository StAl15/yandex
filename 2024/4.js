/**
 * D. Номер карты
 * Вите срочно нужно перевести деньги на другую карту, но номер карты, который написал он в спешке, не до конца читаем. К счастью, из-за строгих требований ко всем банковским картам в стране Вите, номер можно всё ещё восстановить. Помогите ему с этой задачей.
 *
 * В этой стране все номера банковских карт должны соответствовать следующим требованиям:
 *
 * Номер карты состоит только из цифр от 0 до 2 и дефисов
 * Каждый дефис стоит между цифрами, тем самым разделяя номер на блоки цифр
 * Каждый блок цифр имеет длину от 3 до 7 цифр
 * В записи блока цифры 0 и 2 не идут два раза подряд
 * В этой стране всего два банка: Тратьбанк и Омегабанк. Каждая из них, помимо вышеперечисленных требований соблюдает и собственные.
 *
 * Требования Тратьбанка:
 *
 * Ни один блок, за исключением последнего, не может начинаться с 0
 * В каждом блоке цифра 1 встречается не больше одного раза
 * Длина любого блока, после первого, больше 4
 * Требования Омегабанка:
 *
 * В номере есть как минимум один блок длины 5 или 7
 * В номере есть блок, значение которого строго меньше 20000 (например 012011)
 * В номере как минимум два блока и второй с начала блок длины 6
 * Формат ввода
 * На вход в функцию единственным аргументом подается строка — номер карты, в которой ровно один символ заменили на точку. Гарантируется, что в этой строке существует единственная замена точки в на другой символ так, чтобы номер стал подходить под требования либо Тратьбанка, либо Омегабанка.
 *
 * Формат вывода
 * Требуется вывести строку с номером из входных данных с заменой точки на другой символ так, чтобы номер стал подходить под требования одного из банков.
 *
 * Примечания
 * Задачу рекомендуется решать через регулярные выражения, для отладки которых существует много онлайн сайтов.
 *
 * Код решения должен экспортировать функцию через module.exports. Шаблон для удобства:
 *
 *
 *  * @param {string} number
 *  * @returns {string}
 *
 *

 function restoreTheBankNumber(number) {
 *   // Ваше решение...
 *
}

 *
 *
 module.exports = restoreTheBankNumber
 * Пример
 использования:
 *
 *
 const restoreTheBankNumber = require('solution.js')
 *
 * restoreTheBankNumber('111111-011111-2.02102') // '111111-011111-2102102'
 *
 * restoreTheBankNumber('111111.011111-2102102') // '111111-011111-2102102'
 *
 * restoreTheBankNumber('111111-.11111-2102102') // '111111-011111-2102102'
 */
function restoreTheBankNumber(number) {
    // Ваше решение...

    // const dotIndex = number.indexOf('.');
    //
    // // Split the number into two parts based on the position of the dot
    // const prefix = number.slice(0, dotIndex);
    // const suffix = number.slice(dotIndex + 1);
    //
    // // Regular expressions for checking Tratbank and Omegabank requirements
    // const tratabankRegex = /^(?:([1-9][1-9]?[0-2]?[0-2]?)-)*([1-9][1-9]?[0-2]?[0-2]?)$/;
    // const omegabankRegex = /^(?:([0-1][0-1]?[0-2]?[0-2]?)-)*([0-1][0-1]?[0-2]?[0-2]?)-([0-1][0-1]?[0-2]?[0-2]?)/;
    //
    // // Check if the prefix matches Tratbank or Omegabank requirements
    // if (prefix.match(tratabankRegex)) {
    //     return prefix.replace('.', '1') + '-' + suffix;
    // } else if (prefix.match(omegabankRegex)) {
    //     return prefix.replace('.', '0') + '-' + suffix;
    // }
    //
    // return number;


}

module.exports = restoreTheBankNumber


console.log(restoreTheBankNumber('111111-011111-2.02102')) // '111111-011111-2102102'

console.log(restoreTheBankNumber('111111.011111-2102102')) // '111111-011111-2102102'

console.log(restoreTheBankNumber('111111-.11111-2102102')) // '111111-011111-2102102'
