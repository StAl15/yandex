/**
 *  E. –î—Ä—É–∂–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
 *  –í–≤–µ–¥–µ–Ω–∏–µ
 *  –ú–∞—à–∞ ‚Äî —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –≤ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ –Ø–Ω–¥–µ–∫—Å–∞. –ï—ë –∫–æ–º–∞–Ω–¥–∞ –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è —Å–æ–∑–¥–∞–Ω–∏–µ–º –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –±–∏–±–ª–∏–æ—Ç–µ–∫, –∫–æ—Ç–æ—Ä—ã–µ —É—Å–∫–æ—Ä—è—é—Ç –∏ —É–ø—Ä–æ—â–∞—é—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤—ã—Ö —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤. –í –∫–æ–º–∞–Ω–¥–µ –ú–∞—à–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ª—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏, –ø–æ—ç—Ç–æ–º—É –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è —Å–æ–≥–ª–∞—Å–Ω–æ SemVer. –ë–ª–∞–≥–æ–¥–∞—Ä—è SemVer –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è–º –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –ø—Ä–æ—â–µ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –Ω–æ–≤—ã—Ö –≤–µ—Ä—Å–∏–π, –æ—Ü–µ–Ω–∏—Ç—å —Å—Ç–µ–ø–µ–Ω—å —Ä–∏—Å–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏ –ø–æ–Ω—è—Ç—å, –∫–∞–∫–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–Ω–µ—Å–µ–Ω—ã —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏. –≠—Ç–æ —É–¥–æ–±–Ω—ã–π –∏ –ø—Ä–æ—Å—Ç–æ–π –Ω–∞–±–æ—Ä –ø—Ä–∞–≤–∏–ª –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –º–µ–∂–¥—É –≤–µ—Ä—Å–∏—è–º–∏, –Ω–æ –Ω–µ –≤—Å–µ–≥–¥–∞ –ª–µ–≥–∫–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –∫–∞–∫–æ–µ –∏–º–µ–Ω–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –±—ã–ª–æ —Å–¥–µ–ª–∞–Ω–æ.
 *
 *      –ö–æ–ª–ª–µ–≥–∏ –ú–∞—à–∏ –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä—É—é—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –ø–æ SemVer —Ç–∞–∫:
 *
 *      ¬´–ò–¥–µ—è –Ω–æ–º–µ—Ä–æ–≤ –æ—Å–Ω–æ–≤–Ω—ã—Ö –≤–µ—Ä—Å–∏–π SemVer –≤ —Ç–æ–º, —á—Ç–æ –æ–Ω–∏ –Ω–µ –æ–∑–Ω–∞—á–∞—é—Ç –Ω–∏—á–µ–≥–æ –Ω–æ–≤–æ–≥–æ, –∞ —è–≤–ª—è—é—Ç—Å—è –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –æ —Ç–æ–º, —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤—ã –æ—à–∏–±–∞–ª–∏—Å—å —Å API. SemVer –Ω–µ –æ–∑–Ω–∞—á–∞–µ—Ç MAJOR.MINOR.PATCH, –æ–Ω –æ–∑–Ω–∞—á–∞–µ—Ç FAILS.FEATURES.BUGS¬ª.
 *
 *  –ó–∞–¥–∞—á–∞
 *  –ö–æ–ª–ª–µ–≥–∏ –ú–∞—à–∏ –Ω–∞–ø–∏—Å–∞–ª–∏ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –Ω–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏ –ø—É–±–ª–∏—á–Ω–æ–≥–æ API –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ —Å–æ–∑–¥–∞—ë—Ç —Å—Ö–µ–º—É –≤—Å–µ—Ö —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º—ã—Ö –º–æ–¥—É–ª–µ–π. –í–∞–º –Ω—É–∂–Ω–æ –ø–æ–º–æ—á—å –ú–∞—à–µ —Å–æ–∑–¥–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è —Å—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–µ–∂–¥—É –¥–≤—É–º—è –≤–µ—Ä—Å–∏—è–º–∏ API –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–∏–ø –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ–≥–ª–∞—Å–Ω–æ SemVer.
 *
 *      –°—Ö–µ–º–∞ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º—ã—Ö –º–æ–¥—É–ª–µ–π –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∞ –≤ –≤–∏–¥–µ –º–∞—Å—Å–∏–≤–∞ –æ–±—ä–µ–∫—Ç–æ–≤ SchemaEntry, –≥–¥–µ –∫–∞–∂–¥—ã–π SchemaEntry –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –º–æ–¥—É–ª—å –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ.
 *
 *      –û–±—ä–µ–∫—Ç SchemaEntry –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º:
 *
 *      type SchemaEntry = {
 *      name: string;
 *      type: string;
 *      documentation?: string;
 *      returnType?: string;
 *      parameters?: {
 *          documentation?: string;
 *          name: string;
 *          type: string;
 *      }[];
 *  };
 *  –®–∞–±–ª–æ–Ω
 *  /**
 *   * @typedef {Object} SchemaEntry
 *   * @property {string} name
 *   * @property {string} type
 *   * @property {Object[]} [parameters]
 *   * @property {string} parameters.documentation
 *   * @property {string} parameters.name
 *   * @property {string} parameters.type
 *   * @property {string} [documentation]
 *   * @property {string} [returnType]
 *   * /
 *
 *  /**
 *   * Compares two schema entries and returns the difference.
 *   * @param {SchemaEntry[]} oldSchema - An array of old schema entries.
 *   * @param {SchemaEntry[]} newSchema - An array of new schema entries.
 *   * @return {"major" | "minor" | "patch"} - The result of comparing oldSchema and newSchema.
 *   * /
 *  function solution(oldSchema, newSchema) {
 *      // –í–∞—à–µ —Ä–µ—à–µ–Ω–∏–µ...
 *  }
 *
 *  module.exports = solution
 *  –§–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞
 *  Patch change
 *  –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
 *  // old.ts
 *  /**
 *   * tsdoc comment.
 *   * /
 *  export const testVariable: string = "yandex";
 *
 *  /**
 *   * tsdoc comment.
 *   * @param a - The first parameter.
 *   * @param b - The second parameter.
 *   * /
 *  export const testArrowFunction = (a: string, b: number) => {};
 *
 *  // new.ts
 *  /**
 *   * tsdoc comment üî•.
 *   * /
 *  export const testVariable: string = "yandex";
 *
 *  /**
 *   * tsdoc comment üéÑüéÅ.
 *   * @param a - The first parameter.
 *   * @param b - The second parameter.
 *   * /
 *  export const testArrowFunction = (a: string, b: number) => {};
 *  –ù–∞ –≤—Ö–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏ –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω–æ:
 *
 *  // oldSchema
 *      [
 *          {
 *              name: "testVariable",
 *              documentation: "tsdoc comment.",
 *              type: "string",
 *          },
 *          {
 *              name: "testArrowFunction",
 *              documentation: "tsdoc comment.",
 *              type: "(a: string, b: number) => void",
 *              parameters: [
 *                  {
 *                      name: "a",
 *                      documentation: "- The first parameter.",
 *                      type: "string",
 *                  },
 *                  {
 *                      name: "b",
 *                      documentation: "- The second parameter.",
 *                      type: "number",
 *                  },
 *              ],
 *              returnType: "void",
 *          },
 *      ];
 *
 *  // newSchema
 *  [
 *      {
 *          name: "testVariable",
 *          documentation: "tsdoc comment üî•.",
 *          type: "string",
 *      },
 *      {
 *          name: "testArrowFunction",
 *          documentation: "tsdoc comment üéÅ.",
 *          type: "(a: string, b: number) => void",
 *          parameters: [
 *              {
 *                  name: "a",
 *                  documentation: "- The first parameter.",
 *                  type: "string",
 *              },
 *              {
 *                  name: "b",
 *                  documentation: "- The second parameter.",
 *                  type: "number",
 *              },
 *          ],
 *          returnType: "void",
 *      },
 *  ];
 *  Minor change
 *  –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
 *  // old.ts
 *  export const x: number = 10;
 *
 *  // new.ts
 *  export const y: number = 20;
 *  export const x: number = 10;
 *  –ù–∞ –≤—Ö–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏ –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω–æ:
 *
 *  // oldSchema
 *      [
 *          {
 *              name: "x",
 *              type: "number",
 *          },
 *      ];
 *
 *  // newSchema
 *  [
 *      {
 *          name: "y",
 *          type: "number",
 *      },
 *      {
 *          name: "x",
 *          type: "number",
 *      },
 *  ];
 *  –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ç–∏–ø–∞
 *  // old.ts
 *  export let x: number = 10;
 *  export let y: string = "yandex";
 *
 *  // new.ts
 *  export let x: number | string = 10;
 *  export let y: string | undefined = "yandex";
 *  –ù–∞ –≤—Ö–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏ –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω–æ:
 *
 *  // oldSchema
 *      [
 *          {
 *              name: "x",
 *              type: "number",
 *          },
 *          {
 *              name: "y",
 *              type: "string",
 *          },
 *      ];
 *
 *  // newSchema
 *  [
 *      {
 *          name: "x",
 *          type: "number | string",
 *      },
 *      {
 *          name: "y",
 *          type: "string | undefined",
 *      },
 *  ];
 *  –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ç–∏–ø–∞ —É –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ —Ñ—É–Ω–∫—Ü–∏–∏
 *  // old.ts
 *  export const testFn = (a: string, b: number) => {};
 *
 *  // new.ts
 *  export const testFn = (a: string | number, b?: number) => {};
 *  –ù–∞ –≤—Ö–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏ –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω–æ:
 *
 *  // oldSchema
 *      [
 *          {
 *              name: "testFn",
 *              type: "(a: string, b: number) => void",
 *              parameters: [
 *                  {
 *                      name: "a",
 *                      type: "string",
 *                  },
 *                  {
 *                      name: "b",
 *                      type: "number",
 *                  },
 *              ],
 *              returnType: "void",
 *          },
 *      ];
 *
 *  // newSchema
 *  [
 *      {
 *          name: "testFn",
 *          type: "(a: string | number, b?: number) => void",
 *          parameters: [
 *              {
 *                  name: "a",
 *                  type: "string | number",
 *              },
 *              {
 *                  name: "b",
 *                  type: "number | undefined",
 *              },
 *          ],
 *          returnType: "void",
 *      },
 *  ];
 *  Major change
 *  –£–¥–∞–ª–µ–Ω–∏–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º–æ–≥–æ –º–æ–¥—É–ª—è
 *  // old.ts
 *  export const y: number = 20;
 *  export const x: number = 10;
 *
 *  // new.ts
 *  export const x: number = 10;
 *  –ù–∞ –≤—Ö–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏ –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω–æ:
 *
 *  // oldSchema
 *      [
 *          {
 *              name: "y",
 *              type: "number",
 *          },
 *          {
 *              name: "x",
 *              type: "number",
 *          },
 *      ];
 *
 *  // newSchema
 *  [
 *      {
 *          name: "x",
 *          type: "number",
 *      },
 *  ];
 *  –°—É–∂–µ–Ω–∏–µ —Ç–∏–ø–∞
 *  // old.ts
 *  export let x: number | string = 10;
 *
 *  // new.ts
 *  export let x: number = 10;
 *  –ù–∞ –≤—Ö–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏ –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω–æ:
 *
 *  // oldSchema
 *      [
 *          {
 *              name: "x",
 *              type: "number | string",
 *          },
 *      ];
 *
 *  // newSchema
 *  [
 *      {
 *          name: "x",
 *          type: "number",
 *      },
 *  ];
 *  –§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞
 *  Patch change
 *  –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
 *  patch
 *  Minor change
 *  –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
 *  minor
 *  –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ç–∏–ø–∞
 *  minor
 *  –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ç–∏–ø–∞ —É –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ —Ñ—É–Ω–∫—Ü–∏–∏
 *  minor
 *  Major change
 *  –£–¥–∞–ª–µ–Ω–∏–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º–æ–≥–æ –º–æ–¥—É–ª—è
 *  major
 *  –°—É–∂–µ–Ω–∏–µ —Ç–∏–ø–∞
 *  major
 *  –ü—Ä–∏–º–µ—á–∞–Ω–∏—è
 *  –ù–∞ –≤—Ö–æ–¥ –±—É–¥—É—Ç –ø–æ–¥–∞–≤–∞—Ç—å—Å—è –ø—Ä–æ—Å—Ç—ã–µ —Ç–∏–ø—ã: number, string, boolean, undefined.
 *      –ù–∞ –≤—Ö–æ–¥ –±—É–¥—É—Ç –ø–æ–¥–∞–≤–∞—Ç—å—Å—è union-—Ç–∏–ø—ã –Ω–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ—Å—Ç—ã—Ö —Ç–∏–ø–æ–≤, –Ω–∞–ø—Ä–∏–º–µ—Ä: number | undefined, number | string, number | string | boolean.
 *      –ù–∞ –≤—Ö–æ–¥ –±—É–¥—É—Ç –ø–æ–¥–∞–≤–∞—Ç—å—Å—è —Ñ—É–Ω–∫—Ü–∏–∏, –ø—Ä–∏–Ω–∏–º–∞—é—â–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ—Å—Ç—ã—Ö –∏ union-—Ç–∏–ø–æ–≤.
 *      –§—É–Ω–∫—Ü–∏—è –º–æ–∂–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Ç–æ–ª—å–∫–æ void, –ø—Ä–æ—Å—Ç–æ–π —Ç–∏–ø –∏–ª–∏ union-—Ç–∏–ø.
 *      –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ç–∏–ø–∞ —Å—á–∏—Ç–∞–µ—Ç—Å—è –æ–±—Ä–∞—Ç–Ω–æ —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º, —Ç–æ–≥–¥–∞ –∫–∞–∫ —Å—É–∂–µ–Ω–∏–µ —Ç–∏–ø–∞ —è–≤–ª—è–µ—Ç—Å—è –æ–±—Ä–∞—Ç–Ω–æ –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º.
 *      –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ —Å—á–∏—Ç–∞–µ—Ç—Å—è –æ–±—Ä–∞—Ç–Ω–æ —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º, —Ç–æ–≥–¥–∞ –∫–∞–∫ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º–æ–π —Å—É—â–Ω–æ—Å—Ç–∏ —è–≤–ª—è–µ—Ç—Å—è –æ–±—Ä–∞—Ç–Ω–æ –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º.
 */
function main(){

}
